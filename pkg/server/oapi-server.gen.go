// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Abspath defines model for _abspath.
type Abspath struct {
	Abspaths *string `json:"abspaths"`
}

// File defines model for _file.
type File struct {
	FileName *openapi_types.File `json:"fileName,omitempty"`
}

// Oam defines model for _oam.
type Oam struct {
	Build *string `json:"build"`
	Sn    *string `json:"sn"`
}

// GetFilepathJSONRequestBody defines body for GetFilepath for application/json ContentType.
type GetFilepathJSONRequestBody = Oam

// PostUploadMultipartRequestBody defines body for PostUpload for multipart/form-data ContentType.
type PostUploadMultipartRequestBody = File

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /filepath)
	GetFilepath(ctx echo.Context) error

	// (GET /hello)
	GetHello(ctx echo.Context) error

	// (POST /upload)
	PostUpload(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetFilepath converts echo context to params.
func (w *ServerInterfaceWrapper) GetFilepath(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFilepath(ctx)
	return err
}

// GetHello converts echo context to params.
func (w *ServerInterfaceWrapper) GetHello(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHello(ctx)
	return err
}

// PostUpload converts echo context to params.
func (w *ServerInterfaceWrapper) PostUpload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUpload(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/filepath", wrapper.GetFilepath)
	router.GET(baseURL+"/hello", wrapper.GetHello)
	router.POST(baseURL+"/upload", wrapper.PostUpload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xTwW7bMAz9FYHbMY3dFbv41g3Y1stWoOu5oGU6ViGLqkgXCIr8+yA5adA5K9ZhOhEi",
	"+fj4SD6B5TFyoKACzROIHWjEYt5hKxF1yHZMHCmpo+LZO4odJu+x9QSNpolWoNtI0IBocmEDu93zD7f3",
	"ZBV2K7jrXY7/HTX/fsexeHpOIyo00LqAaQtL3IzDOC5h2sn57i+YrUDCPzWQv1zoOSd3JDa5qI4DNHCZ",
	"1PVo1dxQenSWzOX1VabuNMPDTxI1nwcMmh3mzPyIFLJ1sa5hBY+UZMap1+frOjPkSAGjgwYu1nUJeta9",
	"ynIdxrMhXbIRwmQHowMZxtHkeIOhMz2pHYxTMdiKKRClUsKceNVBA19JvxzgV5DoYSLRT9xtcxXLQSmU",
	"ghijd7bkVffC4bhB2XqfqIcG3lXHFav2+1WV2e2KlokkcpB5eh/q+v/VOCxwKfNSnJvJWhLpJ++3ZkNa",
	"ZCoSzQrP1KqBvOc/KmzLLDtqp80pCb+V5NMNvsLmBrdmTt2TmKJnLCsdWU7QmP0ze2Ujmhg3tGB0zaK3",
	"M9RrMx0nry5i0iof4VmHim+QvJz2fqwPk0vUzXe1e7MMt8eu8il8rM+XCT06T93L0PJ+BQAA//9gE1fI",
	"1wQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
